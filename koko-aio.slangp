/*TODO:
    Guess more aspect ratios: edit. nope: Guessing is impossible..
    Update presets with new switchable functions
    Update pipeline graph

    Investigate the possible use of mipmapping in bloom function too.
    mix vignette and spotlight in another pass or they will be used by ambilight.
    Try to move flickering scanlines into main?
    is initial doublesize pass really needed by fxaa or in_glow, or we can just play with tex coordinate?
    
    
Performances on haswell igp, 1080p, 60fps: (before putting halo and in_glow into lower resolution pass)
    aspect full (16:9)

    base: 46%
    FXAA: +2%
    scanlines: +3%
    input glow gamma 3: +31%
    rgb mask +1%
    slotmask +1%
    halo gamma 3: +31%
    bloom: +3%
    color corrections: +0%
    curvature no warp o warp: +4%
    vignette: 0%
    spot: 0%
    ambient light: 1% 

    Aspect full + ambient light:
    base: 48%
    fxaa 3
    scanlines: 3
    input glow gamma 3: 25%
    rgb mask: 1%
    slot mask: 1%
    halo gamma 3: 25%
    curvature 2%


    base: 58
    FXAA: 60
    input glow gamma 3: 65
    ambient light: 71
    
    
*/

/*
    Koko-aio shader is meant to be an all-in one crt shader.
    It can be configured with many parameters, so that can be
    scaled to run on even on modest gpus while still developed to
    run with heavier presets on at least Haswell+ iGpus.
    It is not meant to simulate the internal behaviour of CRT displays,
    but to give users the parameters to make their monitors to look similar.
    Several presets are included.

    Actually it provides emulation for:
        scanlines, screenlines, RGB vertical masks, horizontal slot masks,
        glowing, haloing, blooming, gamma and saturation correction,
        black frame insertions, interlace emulation, antialiasing.

    External code by:
    * CRT - Guest - Dr.Venom (single pass bloom function)
    * Nvidia (FXAA)



* Pipeline *
------------

→ → Original image from emulator
     ↓
    Double the input size
     ↓
    FXAA antialiasing
     ↓
    Emulate scanlines → Input Glow → phosphors → slot mask/aperture grill →  halo →
                                                                                    ↓
                                                                                    ↓
→ → Original image from emulator                                                    ↓
     ↓                                                                              ↓
    Bloom                                                                           ↓
     ↓                                                                              ↓
    mix  ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ←
     ↓
    Color correction → Vignette, spot → Black frame insertion
                                                ↓
                                            Viewport


*/

shaders = 19
/*For P-uae defaults, doubling just y0 seems the best option.
  90% of games are lowres in vertical size and p-uae defaults
  to 720 pixels width, which is enough for this preset to work as intended.
  Rest warned, that when a game sets an interlaced resolution, p-uae
  will output even 560 h-lines which, doubled, will result in
  1120 h lines. too much even for a 1080p screen.
  Auto-Cropping/overscan emulation could be added in a future release.
  For other emulators/systems, probably it is best and safe to doulbe x0 too.
*/
           shader0 = shaders/passthrough.slang
            alias0 = "doublesize_pass"
    filter_linear0 = false
       scale_type0 = source
          scale_x0 = 2.0
          scale_y0 = 2.0

/* Nvidia fxaa pass:
   works good for "SD" resolutions
*/
           shader1 = shaders/fxaa.slang
            alias1 = "FXAA_pass"
    filter_linear1 = true
       scale_type1 = source
            scale1 = 1.0

    //Put in_glow in its own pass so that we can use lower resolution
           shader2 = shaders/in_glow_and_scanline_flickering.slang
            alias2 = "in_glow_and_scanline_flickering_pass"
    filter_linear2 = true
            scale2 = 1
       scale_type2 = source    
float_framebuffer2 = true
            
          
    //Put halo in its own pass so that we can use lower resolution
           shader3 = shaders/halo.slang
            alias3 = "halo_pass"
    filter_linear3 = true
            scale3 = 0.5
       scale_type3 = viewport
float_framebuffer3 = true


/* In this pass we emulate scanlines, glowing,
   RGB vertical mask, slot mask,haloing and color corrections
*/
           shader4 = shaders/main_pass.slang
            alias4 = "main_pass"
    filter_linear4 = true
            scale4 = 1.0
       scale_type4 = viewport
       
     
/*      Get the average luminance needed by ambilight here, because:
        * mipmap_input only works on "Source" texture
        * the following pass does not use the previous one 
        * the previous pass represents scene changes.
*/
               shader5 = shaders/ambi_avglum_pass.slang
                alias5 = "ambi_avglum_pass"
        filter_linear5 = false
           scale_type5 = source
                scale5 = 0.01
         mipmap_input5 = true


/* In the subsequent passes we do first a fast blOOm by first
   sampling the original texture and scale it down to keep
   it fast, next we do subsequent blURs of the bloomed
   pass.
   */
               shader6 = shaders/bloom_passthrough_conditional.slang
                alias6 = "bloom_pass_0"
        filter_linear6 = true
           scale_type6 = absolute
              scale_x6 = 320
              scale_y6 = 240

               shader7 = shaders/bloom_pass_1.slang
                alias7 = "bloom_pass_1"
        filter_linear7 = true
           scale_type7 = source
                scale7 = 1

               shader8 = shaders/bloom_pass_2.slang
                alias8 = "bloom_pass_2"
        filter_linear8 = true
           scale_type8 = source
                scale8 = 1

               shader9 = shaders/bloom_pass_2.slang
                alias9 = "bloom_pass_3"
        filter_linear9 = true
           scale_type9 = source
                scale9 = 1

               shader10 = shaders/bloom_pass_2.slang
                alias10 = "bloom_pass_final"
        filter_linear10 = true
           scale_type10 = source
                scale10 = 1

// Draw vignette and spot on lower resolution
           shader11 = shaders/vignette_and_spot.slang
       scale_type11 = absolute
            alias11 = vignette_and_spot_pass
    filter_linear11 = true
          scale_x11  = 256
          scale_y11  = 256

/* This pass pass will do the composition of the previous passes
   with the bloomed image, vignette and spot light,  and black frame insertions.
*/
           shader12 = shaders/final_pass.slang
            alias12 = "final_pass"
    filter_linear12 = true
       scale_type12 = viewport
            scale12 = 1.0

/* Create the ambilight magic: */
        //...repeat left and right borders
               shader13 = shaders/ambi_displace.slang
                alias13 = "ambi_displace_pass"
        filter_linear13 = true
           scale_type13 = source
               scale_13  = 0.5
         mipmap_input13 = true

        //...then just downscale via mipmapping here:
               shader14 = shaders/ambi_passthrough_conditional.slang
                alias14 = "ambi_downscale_pass"
        filter_linear14 = true
           scale_type14 = absolute
              scale_x14 = 32
              scale_y14 = 24
         mipmap_input14 = true

               shader15 = shaders/ambi_passthrough_conditional.slang //shaders/ambi_pre_pass.slang
        filter_linear15 = true
           scale_type15 = source
                scale15 = 8.0

               shader16 = shaders/ambi_pre_pass.slang
                alias16 = "ambi_pre_pass1"
        filter_linear16 = true
           scale_type16 = source
                scale16 = 1.0

               shader17 = shaders/ambi_temporal_pass.slang
                alias17 = "ambi_temporal_pass"
        filter_linear17 = true
           scale_type17 = source
    float_framebuffer17 = true

           shader18 = shaders/ambi_mix_pass.slang
            alias18 = "ambientmix_pass"
       scale_type18 = viewport
            scale18 = 1.0
    filter_linear18 = true

