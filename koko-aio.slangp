/*TODO:
    Guess more aspect ratios: edit. nope: Guessing is impossible..
    Update presets with new switchable functions
    Update pipeline graph

    Investigate the possible use of mipmapping in bloom function too.
    mix vignette and spotlight in another pass or they will be used by ambilight.
    vignette has wrong aspect.
    

Performances on haswell igp, 1080p, 60fps: (before putting halo and in_glow into lower resolution pass)
    aspect full (16:9)

    base: 46%
    FXAA: +2%
    scanlines: +3%
    input glow gamma 3: +31%
    rgb mask +1%
    slotmask +1%
    halo gamma 3: +31%
    bloom: +3%
    color corrections: +0%
    curvature no warp o warp: +4%
    vignette: 0%
    spot: 0%
    ambient light: 1% 

    Aspect full + ambient light:
    base: 48%
    fxaa 3
    scanlines: 3
    input glow gamma 3: 25%
    rgb mask: 1%
    slot mask: 1%
    halo gamma 3: 25%
    curvature 2%


*/

/*
    Koko-aio shader is meant to be an all-in one crt shader.
    It can be configured with many parameters, so that can be
    scaled to run on even on modest gpus while still developed to
    run with heavier presets on at least Haswell+ iGpus.
    It is not meant to simulate the internal behaviour of CRT displays,
    but to give users the parameters to make their monitors to look similar.
    Several presets are included.

    Actually it provides emulation for:
        scanlines, screenlines, RGB vertical masks, horizontal slot masks,
        glowing, haloing, blooming, gamma and saturation correction,
        black frame insertions, interlace emulation, antialiasing.

    External code by:
    * CRT - Guest - Dr.Venom (single pass bloom function)
    * Nvidia (FXAA)



* Pipeline *
------------

→ → Original image from emulator
     ↓
    Double the input size
     ↓
    FXAA antialiasing
     ↓
    Emulate scanlines → Input Glow → phosphors → slot mask/aperture grill →  halo →
                                                                                    ↓
                                                                                    ↓
→ → Original image from emulator                                                    ↓
     ↓                                                                              ↓
    Bloom                                                                           ↓
     ↓                                                                              ↓
    mix  ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ← ←
     ↓
    Color correction → Vignette, spot → Black frame insertion
                                                ↓
                                            Viewport


*/

shaders = 6
/*For P-uae defaults, doubling just y0 seems the best option.
  90% of games are lowres in vertical size and p-uae defaults
  to 720 pixels width, which is enough for this preset to work as intended.
  Rest warned, that when a game sets an interlaced resolution, p-uae
  will output even 560 h-lines which, doubled, will result in
  1120 h lines. too much even for a 1080p screen.
  Auto-Cropping/overscan emulation could be added in a future release.
  For other emulators/systems, probably it is best and safe to doulbe x0 too.
*/
           shader0 = shaders/passthrough.slang
            alias0 = "doublesize_pass"
    filter_linear0 = false
       scale_type0 = source
          scale_x0 = 2.0
          scale_y0 = 2.0

/* Nvidia fxaa pass:
   works good for "SD" resolutions
*/
           shader1 = shaders/fxaa.slang
            alias1 = "FXAA_pass"
    filter_linear1 = true
       scale_type1 = source
            scale1 = 1.0

    //this as a "pass" is somehow important for the main pass to work good.
    //also, there it will do flickering scanlines.
           shader2 = shaders/scanline-flickering.slang
            alias2 = "scanline_flickering_pass"
       scale_type2 = source
    filter_linear2 = true
            scale2 = 1.0

    //Put in_glow in its own pass so that we can use lower resolution
           shader3 = shaders/in_glow.slang
            alias3 = "in_glow_pass"
    filter_linear3 = true
            scale3 = 0.5
       scale_type3 = viewport    
            
    //Put halo in its own pass so that we can use lower resolution
           shader4 = shaders/halo.slang
            alias4 = "halo_pass"
    filter_linear4 = true
            scale4 = 0.5
       scale_type4 = viewport    


/* In this pass we emulate scanlines, glowing,
   RGB vertical mask, slot mask,haloing and color corrections
*/
           shader5 = shaders/main_pass.slang
            alias5 = "main_pass"
    filter_linear5 = true
            scale5 = 1.0
       scale_type5 = viewport
       
     
/*      Get the average luminance needed by ambilight here, because:
        * mipmap_input only works on "Source" texture
        * the following pass does not use the previous one 
        * the previous pass represents scene changes.
*/
               shader6 = shaders/ambi_avglum_pass.slang
                alias6 = "ambi_avglum_pass"
        filter_linear6 = false
           scale_type6 = source
         mipmap_input6 = true


/* In the subsequent passes we do first a fast blOOm by first
   sampling the original texture and scale it down to keep
   it fast, next we do subsequent blURs of the bloomed
   pass.
   */
               shader7 = shaders/bloom_passthrough_conditional.slang
                alias7 = "bloom_pass_0"
        filter_linear7 = true
           scale_type7 = absolute
              scale_x7 = 320
              scale_y7 = 240

               shader8 = shaders/bloom_pass_1.slang
                alias8 = "bloom_pass_1"
        filter_linear8 = true
           scale_type8 = source
                scale8 = 1

               shader9 = shaders/bloom_pass_2.slang
                alias9 = "bloom_pass_2"
        filter_linear9 = true
           scale_type9 = source
                scale9 = 1

               shader10 = shaders/bloom_pass_2.slang
                alias10 = "bloom_pass_3"
        filter_linear10 = true
           scale_type10 = source
                scale10 = 1

               shader11 = shaders/bloom_pass_2.slang
                alias11 = "bloom_pass_final"
        filter_linear11 = true
           scale_type11 = source
                scale11 = 1

// Draw vignette and spot on lower resolution
           shader12 = shaders/vignette.slang
       scale_type12 = absolute
            alias12 = vignette_pass
    filter_linear12 = true
          scale_x12 = 256
          scale_y12 = 256

           shader13 = shaders/spot.slang
       scale_type13 = absolute
    filter_linear13 = true
            alias13 = spot_pass
          scale_x13 = 256
          scale_y13 = 256


/* This pass pass will do the composition of the previous passes
   with the bloomed image, vignette and spot light,  and black frame insertions.
*/
           shader14 = shaders/final_pass.slang
            alias14 = "final_pass"
    filter_linear14 = true
       scale_type14 = viewport
            scale14 = 1.0

/* Create the ambilight magic: */
        //...repeat left and right borders
               shader15 = shaders/ambi_displace.slang
                alias15 = "ambi_displace_pass"
        filter_linear15 = true
           scale_type15 = source
               scale_15  = 0.5
         mipmap_input15 = true

        //...then just downscale via mipmapping here:
               shader16 = shaders/ambi_passthrough_conditional.slang
                alias16 = "ambi_downscale_pass"
        filter_linear16 = true
           scale_type16 = absolute
              scale_x16 = 32
              scale_y16 = 24
         mipmap_input16 = true

               shader17 = shaders/passthrough.slang //shaders/ambi_pre_pass.slang
        filter_linear17 = true
         mipmap_input17 = true
           scale_type17 = source
                scale17 = 2.0
                
               shader18 = shaders/passthrough.slang //shaders/ambi_pre_pass.slang
        filter_linear18 = true
         mipmap_input18 = true
           scale_type18 = source
                scale18 = 2.0
                
               shader19 = shaders/passthrough.slang //shaders/ambi_pre_pass.slang
        filter_linear19 = true
         mipmap_input19 = true
           scale_type19 = source
                scale19 = 2.0

               shader20 = shaders/ambi_pre_pass.slang
                alias20 = "ambi_pre_pass1"
        filter_linear20 = true
         mipmap_input20 = true
           scale_type20 = source
                scale20 = 2.0





               shader21 = shaders/ambi_temporal_pass.slang
                alias21 = "ambi_temporal_pass"
        filter_linear21 = true
           scale_type21 = source
    float_framebuffer21 = true



    //shader18 = shaders/curvature.slang
    //alias18 = "curvature_pass"
    //scale_type18 = viewport
    //scale18 = 1.0
    //filter_linear18 = true

           shader22 = shaders/ambi_mix_pass.slang
            alias22 = "ambientmix_pass"
       scale_type22 = viewport
            scale22 = 1.0
    filter_linear22 = true

